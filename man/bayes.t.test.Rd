\name{bayes.t.test}
\alias{bayes.t.test}
\title{Robust student's t-test based on Bayesian statistics.}
\description{
Bayesian statistics analysis of metric variable on two groups.
}
\usage{
bayes.t.test(vals, grp, stanDso, ...)
}
\arguments{
  \item{vals}{A vector of metric values assumed to be generated by student's t distribution.}
  \item{grp}{The groups of each elements in \code{vals}. Must be integers, either 1 or 2.}
  \item{stanDso}{An object of class \code{stanmodel}.}
  \item{...}{Parameters passed to \code{sampling(...)} in package \code{rstan}.}
}
\details{
Robust student's t-test based on Bayesian statistics provided by \code{rstan} package.

Please refer to:
Stan-Ymet-Xnom2grp-MrobustHet.R and Stan-Ymet-Xnom2grp-MrobustHet-Example.R.
Accompanies the book:
   Kruschke, J. K. (2014). Doing Bayesian Data Analysis: 
   A Tutorial with R and JAGS, 2nd Edition. Academic Press / Elsevier.

Depreated, use \code{best.robust_t_test} as it gives more flexibility to control model parameters.
}
\seealso{
\code{...}
}
\examples{
library(lxctk)

## Step 1: compile the model
library(rstan)

# Translate to C++ and compile to DSO. This will take a few mins. Select one of the model_code.
model_code = original.model()  #### loading model code: use the original model
model_code = modified.model()  #### loading model code: use modified model. The difference
## is: vals shared the same normality in t distirbution in the original;
## whereas vals was modeled by different normalities in t distirbution.
stanDso <- stan_model( model_code=model_code ) 
## save(stanDso, file='stanDso.RData')  ## For later use

## If you have already had a stanmodel object stanDso saved as a RData file, 
## e.g. stanDso.RData, just load in R with load("stanDso.RData").

## Step 2: running an example
##rstan_options(auto_write = TRUE)
options(mc.cores = 4)
data(TwoGroupIQ)
vals <- TwoGroupIQ$Score
grp <- as.integer(TwoGroupIQ$Group)
fit <- bayes.t.test(vals, grp, stanDso)

## user summary to extract info from fit
x <- summary(fit)
print(x$summary)

## Important notes:
## If bayes.t.test was run in a for-loop (e.g. >128), there will be ERROR:
## "all connections are in use Stan model  does not contain samples."
## Because "A maximum of 128 connections can be allocated..." (?close.connection)
##+for more info. In this case, we need to close connections by hand. For example:

## for (i in 1000)
## {
##	  fit <- bayes.t.test(...)
##	  showConnections(all=TRUE) or ## print(showConnections(all=TRUE))
## }



}

\keyword{utilities}
